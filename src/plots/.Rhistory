gpu_Tesla_sparse[gpu_Tesla_sparse[1] == i][j] = gpu_Tesla_sparse[gpu_Tesla_sparse[1] == i][j] / cpu_sparse[cpu_sparse[1] == i][j]
}
}
gpu_Tesla_sparse[gpu_Tesla_sparse[1] == 4]
gpu_Tesla_sparse[gpu_Tesla_sparse[1] == 4][3]
gpu_Tesla_sparse[gpu_Tesla_sparse[1] == 4][4
]
gpu_Tesla_sparse[gpu_Tesla_sparse[1] == 4][4]
gpu_Tesla_sparse[gpu_Tesla_sparse[1] == 4]
cpu_sparse[cpu_sparse[2]==699][3]
cpu_sparse[cpu_sparse[2]==699][4]
cpu_sparse[cpu_sparse[2]==699][5]
gpu_Tesla_sparse[gpu_Tesla_sparse[2]==699][5]
gpu_Tesla_sparse[5][gpu_Tesla_sparse[2]==699]
cpu_sparse[5][cpu_sparse[1]==4]
cpu_sparse[5][cpu_sparse[1]==699]
gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4] = gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4] / cpu_sparse[5][cpu_sparse[1] == 4]
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
gpu_Tesla_sparse[j][gpu_Tesla_sparse[1] == i] = gpu_Tesla_sparse[j][gpu_Tesla_sparse[1] == i] / cpu_sparse[j][cpu_sparse[1] == i]
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4] / cpu_sparse[5][cpu_sparse[1] == 4]
gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
cpu_sparse[5][cpu_sparse[1] == 4]
gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4] / cpu_sparse[5][cpu_sparse[1] == 4]
cpu_sparse[5][cpu_sparse[1] == 4] /gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
test = get_speedups(gpu_Tesla_sparse, cpu_sparse)
get_speedups <- function(new, reference){
speedups = new
for(i in reference[1]){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
test = get_speedups(gpu_Tesla_sparse, cpu_sparse)
View(test)
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
get_speedups <- function(new, reference){
speedups = new
for(i in reference[1]){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
ggplot(cpu_dense, aes(n, total)) + geom_point()
ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
test = get_speedups(gpu_Tesla_sparse, cpu_sparse)
View(test)
cpu_sparse[1]
print(i)
for (i in cpu_sparse[1])
print(i)
for (i in cpu_sparse[1])
print(i)
test[5][test[1] == i]
}
for (i in cpu_sparse[1]){
test[5][test[1] == i]
}
for (i in cpu_sparse[1]){
print(test[5][test[1] == i])
}
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
print(test[5][test[1]==4])
print(test[5][test[1]==9])
for (i in cpu_sparse[1]){
print(i)
}
for (i in cpu_sparse[1]){
print(test[5][test[1]==i])
}
for (i in cpu_sparse[1]){
print(i)
print(test[5][test[1]==i])
}
for (i in c(cpu_sparse[1])){
print(i)
print(test[5][test[1]==i])
}
cpu_sparse[1]
cpu_sparse[1][]
cpu_sparse[1][2]
cpu_sparse[1][1]
cpu_sparse[1][3]
cpu_sparse
cpu_sparse[1]5]
cpu_sparse[1][5]
length(cpu_sparse[1])
arr = cpu_sparse[1]
arr = as.array(cpu_sparse[1])
View(arr)
arr = as.numeric(cpu_sparse[1])
arr = as.numeric(as.vector(cpu_sparse[1]))
View(cpu_dense)
arr = as.numeric(unlist(cpu_sparse[1]))
for(i in arr)
print(i)
test = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
get_speedups <- function(new, reference, prob_sizes){
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
test = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
tests[5]
test[5]
View(test)
cpu_sparse[5][cpu_sparse[1] == 5] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_speedups <- function(new, reference, prob_sizes){
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
ggplot(cpu_dense, aes(n, total)) + geom_point()
ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
ggplot(speedups, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_dense, cpu_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_dense, cpu_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
View(speedups)
View(cpu_dense)
View(cpu_sparse)
ggplot(speedups, aes(block_size_X, assembly, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, elem_mats, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, elem_mats, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_speedups <- function(new, reference, prob_sizes){
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
ggplot(cpu_dense, aes(n, total)) + geom_point()
ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_dense, cpu_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_dense, gpu_Tesla_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
View(get_speedups)
View(speedups)
speedups = get_speedups(gpu_Tesla_sparse, gpu_Tesla_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_speedups <- function(new, reference, prob_sizes){
speedups = reference
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
ggplot(cpu_dense, aes(n, total)) + geom_point()
ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse, as.numeric(unlist(cpu_sparse[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_dense, cpu_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_speedups(gpu_Tesla_sparse, gpu_Tesla_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
speedups = get_speedups(gpu_Tesla_sparse, cpu_sparse)
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = reference[j][reference[1] == i] / new[j][new[1] == i]
}
}
return(speedups)
}
speedups = get_speedups_cpu(gpu_Tesla_sparse, cpu_sparse)
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = new
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = gpu[j][gpu[1] == i] / cpu[j][cpu[1] == i]
}
}
return(speedups)
}
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = gpu
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = gpu[j][gpu[1] == i] / cpu[j][cpu[1] == i]
}
}
return(speedups)
}
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
View(speedups)
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(cpu[1]))
speedups = gpu
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
gpu_Tesla_dense[1]
unique(gpu_Tesla_dense[1])
as.numeric(unlist(unique(gpu_Tesla_dense[1])))
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(unique(cpu[1])))
speedups = gpu
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
get_gpu_speedups <- function(gpu1, gpu2){
prob_sizes = as.numeric(unlist(unique(gpu2[1])))
speedups = gpu2
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
#get_gpu_speedups <- function(new)
# ggplot(cpu_dense, aes(n, total)) + geom_point()
# ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
#ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_gpu_speedups(gpu_Tesla_sparse, gpu_Tesla_dense, as.numeric(unlist(cpu_dense[1])))
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
View(gpu_Tesla_dense)
View(gpu_Tesla_sparse)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(unique(cpu[1])))
speedups = gpu
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
get_gpu_speedups <- function(gpu1, gpu2){
prob_sizes = as.numeric(unlist(unique(gpu2[1])))
speedups = gpu2
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
speedups = get_gpu_speedups(gpu_Tesla_sparse, gpu_Tesla_dense)
get_gpu_speedups <- function(gpu1, gpu2){
prob_sizes = as.numeric(unlist(unique(gpu2[1])))
speedups = gpu2
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = gpu2[j][gpu2[1] == i] / gpu1[j][gpu1[1] == i]
}
}
return(speedups)
}
speedups = get_gpu_speedups(gpu_Tesla_sparse, gpu_Tesla_dense)
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
prob_sizes = as.numeric(unlist(unique(gpu_Tesla_dense[1])))
prob_sizes
gpu2[5][gpu2[1] == 4] / gpu1[5][gpu1[1] == 4]
gpu_Tesla_dense[5][gpu_Tesla_dense[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
for(i in prob_sizes){
gpu_Tesla_dense[5][gpu_Tesla_dense[1] == i] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == i]
}
for(i in prob_sizes){
print(gpu_Tesla_dense[5][gpu_Tesla_dense[1] == i] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == i])
}
for(i in prob_sizes){
print(i)
print(gpu_Tesla_dense[5][gpu_Tesla_dense[1] == i] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == i])
}
speedups = get_gpu_speedups(gpu_Tesla_sparse, gpu_Tesla_dense)
ggplot(speedups, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
for(i in prob_sizes){
print(i)
print(max(gpu_Tesla_dense[5][gpu_Tesla_dense[1] == i] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == i]))
}
ggplot(speedups, aes(block_size_X, log(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
library(ggplot2)
cpu_dense = read.csv("../timings/cpu_dense_times.csv")
cpu_sparse = read.csv("../timings/cpu_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dense_times.csv")
gpu_Tesla_sparse = read.csv("../timings/gpu_Tesla_sparse_times.csv")
gpu_Tesla_dense = read.csv("../timings/gpu_Tesla_dnsspr_times.csv")
gpu_Tesla_femses = read.csv("../timings/gpu_Tesla_femses_times.csv")
#cpu_sparse[5][cpu_sparse[1] == 4] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == 4]
get_cpu_speedups <- function(gpu, cpu){
prob_sizes = as.numeric(unlist(unique(cpu[1])))
speedups = gpu
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = cpu[j][cpu[1] == i] / gpu[j][gpu[1] == i]
}
}
return(speedups)
}
get_gpu_speedups <- function(gpu1, gpu2){
prob_sizes = as.numeric(unlist(unique(gpu2[1])))
speedups = gpu2
for(i in prob_sizes){
for(j in 5:12){
speedups[j][speedups[1] == i] = gpu2[j][gpu2[1] == i] / gpu1[j][gpu1[1] == i]
}
}
return(speedups)
}
#get_gpu_speedups <- function(new)
# ggplot(cpu_dense, aes(n, total)) + geom_point()
# ggplot(cpu_sparse, aes(n, total)) + geom_smooth() + geom_point()
#ggplot(gpu_Tesla_sparse, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
ggplot(speedups, aes(block_size_X, log10(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log10(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_gpu_speedups(gpu_Tesla_sparse, gpu_Tesla_dense)
ggplot(speedups, aes(block_size_X, total, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, assembly, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, elem_mats, colour = as.factor(n+1))) + geom_point() + geom_smooth()
prob_sizes = as.numeric(unlist(unique(gpu_Tesla_dense[1])))
prob_sizes
for(i in prob_sizes){
print(i)
print(max(gpu_Tesla_dense[5][gpu_Tesla_dense[1] == i] / gpu_Tesla_sparse[5][gpu_Tesla_sparse[1] == i]))
}
ggplot(speedups, aes(block_size_X, log10(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_sparse, cpu_sparse)
ggplot(speedups, aes(block_size_X, log10(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
speedups = get_cpu_speedups(gpu_Tesla_dense, cpu_dense)
ggplot(speedups, aes(block_size_X, log10(total), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(assembly), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(elem_mats), colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, elem_mats, colour = as.factor(n+1))) + geom_point() + geom_smooth()
ggplot(speedups[speedups[1]==4], aes(block_size_X, log10(assembly), colour = as.factor(reconfig))) + geom_point() + geom_smooth()
ggplot(speedups, aes(block_size_X, log10(assembly), colour = as.factor(reconfig))) + geom_point() + geom_smooth()
